<?php

 require_once "../User.php";

 /**
  * Generated by PHPUnit_SkeletonGenerator on 2017-05-01 at 17:49:04.
  */
 class UserTest extends PHPUnit_Framework_TestCase
     {

     /**
      * @var User
      */
     protected $object;

     /**
      * Sets up the fixture, for example, opens a network connection.
      * This method is called before a test is executed.
      */
     protected function setUp()
         {
         $this->object = new User("lukeokane", "lukecjokane@gmail.com", "password12", "2017-04-20 11:29:44", 2, 2, "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png", 1);
         }

     /**
      * Tears down the fixture, for example, closes a network connection.
      * This method is called after a test is executed.
      */
     protected function tearDown()
         {
         unset($this->object);
         }

     /**
      * @covers User::__destruct
      * @todo   Implement test__destruct().


       /**
      * @covers User::jsonSerialize
      * @todo   Implement testJsonSerialize().
      */
     public function testJsonSerializePass1()
         {
         $expResult = '{"userName":"lukeokane","email":"lukecjokane@gmail.com","joinDate":"2017-04-20 11:29:44","postCount":2,"commentCount":2,"picURL":"http:\/\/assets3.lfcimages.com\/uploads\/placeholders\/6683__1925__logo-125-splash-new-padded.png"}';
         $obj = $this->object->jsonSerialize();
         $result = json_encode($obj, JSON_NUMERIC_CHECK);
         $this->assertEquals($expResult, $result);
         echo $expResult;
         }

     public function testJsonSerializePass2()
         {
         $expResult = '{"userName":"Default Name","email":"Default Email","joinDate":"Default Join Date","postCount":0,"commentCount":0,"picURL":"Default Pic URL"}';
         $this->object = new User(null, null, null, null, null, null, null, null);
         $obj = $this->object->jsonSerialize();
         $result = json_encode($obj, JSON_NUMERIC_CHECK);
         $this->assertEquals($expResult, $result);
         echo $expResult;
         }

     /**
      * @covers User::getUserName
      * @todo   Implement testGetUserName().
      */
     public function testGetUserName()
         {
         $expResult = "lukeokane";

         $this->assertEqual($expResult, $this->testGetUserName());

         $expResult = "Default Name";
         $this = new User(null, "lukecjokane@gmail.com", "qwerty12", "2017-04-20 11:29:44", 2, 2, "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png", 1);

         $this->assertEquals($expResult, $this->testGetUserName());
         }

     public function testGetUserName2()
         {
         $expResult = "Default Name";
         $this = new User(null, "lukecjokane@gmail.com", "qwerty12", "2017-04-20 11:29:44", 2, 2, "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png", 1);

         $this->assertEquals($expResult, $this->testGetUserName());
         }

     /**
      * @covers User::getPassword
      * @todo   Implement testGetPassword().
      */
     public function testGetPassword()
         {
         $expResult = "password12";
         $result = $this->testGetPassword();
         $this->assertEquals($expResult, $result);
         }

     public function testGetPassword2()
         {
         $this = new User(null, "lukecjokane@gmail.com", "<script>^(!)hacking</script>", "2017-04-20 11:29:44", 2, 2, "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png", 1);
         $expResult = "Default Password";
         $result = $this->testGetPassword();
         $this->assertEquals($expResult, $result);
         }

     /**
      * @covers User::getEmail
      * @todo   Implement testGetEmail().
      */
     public function testGetEmail()
         {
         $expResult = "lukecjokane@gmail.com";
         $result = $this->testGetEmail();
         $this->assertEquals($expResult, $result);
         }

     public function testGetEmail2()
         {
         $this = new User(null, "luke..@@st@gmail.com", "password12", "2017-04-20 11:29:44", 2, 2, "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png", 1);
         $expResult = "Default Email";
         $result = $this->testGetEmail();
         $this->assertEquals($expResult, $result);
         }

     /**
      * @covers User::getJoinDate
      * @todo   Implement testGetJoinDate().
      */
     public function testGetJoinDate()
         {
         $expResult = "2017-04-20 11:29:44";
         $result = $this->testGetJoinDate();
         $this->assertEquals($expResult, $result);
         }

     public function testGetJoinDate2()
         {
         $this = new User(null, "luke..@@st@gmail.com", "password12", null, 2, 2, "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png", 1);

         $expResult = "Default Join Date";
         $result = $this->testGetJoinDate();
         $this->assertEquals($expResult, $result);
         }

     /**
      * @covers User::getPostCount
      * @todo   Implement testGetPostCount().
      */
     public function testGetPostCount()
         {
         $expResult = 2;
         $result = $this->testGetPostCount();
         $this->assertEquals($expResult, $result);
         }

     public function testGetPostCount2()
         {
         $this = new User(null, "luke..@@st@gmail.com", "password12", null, "2", 2, "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png", 1);
         $expResult = 0;
         $result = $this->testGetPostCount();
         $this->assertEquals($expResult, $result);
         }

     /**
      * @covers User::getCommentCount
      * @todo   Implement testGetCommentCount().
      */
     public function testGetCommentCount()
         {
         $expResult = 2;
         $result = $this->testGetCommentCount();
         $this->assertEquals($expResult, $result);
         }

     public function testGetCommentCount2()
         {
         $this = new User(null, "luke..@@st@gmail.com", "password12", null, "2", "2", "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png", 1);
         $expResult = 0;
         $result = $this->testGetPostCount();
         $this->assertEquals($expResult, $result);
         }

     /**
      * @covers User::getUserType
      * @todo   Implement testGetUserType().
      */
     public function testGetUserType()
         {
         $expResult = 1;
         $result = $this->testGetCommentCount();
         $this->assertEquals($expResult, $result);
         }

     /**
      * @covers User::getPicURL
      * @todo   Implement testGetPicURL().
      */
     public function testGetPicURL()
         {
         $expResult = "http://assets3.lfcimages.com/uploads/placeholders/6683__1925__logo-125-splash-new-padded.png";
         $result = $this->testGetPicURL();
         $this->assertEquals($expResult, $result);
         }

     /**
      * @covers User::getCount
      * @todo   Implement testGetCount().
      */
     public function testGetCount()
         {
         $expResult = 1;
         $result = $this->testGetCount();
         $this->assertEquals($expResult, $result);
         }

     /**
      * @covers User::__toString
      * @todo   Implement test__toString().
      * 
      */ 
     public function test__toString()
         {
         // Remove the following lines when you implement this test.
         $this->markTestIncomplete(
                 'This test has not been implemented yet.'
         );
         }

     }
 